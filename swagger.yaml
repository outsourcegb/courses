swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/api/v1"
tags:
  - name: "course"
    description: "Operations about Courses"
  - name: "user"
    description: "Operations about user"
schemes:
  - "http"

paths:
  /ap1/v1/courses:
    post:
      tags:
        - "course"
      summary: "Create new course"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Course that should be added to the application"
          required: true
          schema:
            $ref: "#/definitions/createCourseBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/course"
        "400":
          description: "Invalid course supplied"
          schema:
            $ref: "#/definitions/ErrorsList"
    patch:
      tags:
        - "course"
      summary: "Update an existing course"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Updated course"
          required: true
          schema:
            $ref: "#/definitions/createCourseBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/course"
        "404":
          description: "Course not found"
        "400":
          description: "Invalid couese supplied"
          schema:
            $ref: "#/definitions/ErrorsList"
  /api/v1/courses/{id}:
    get:
      tags:
        - "course"
      summary: "Show course"
      description: "Show course"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of course to return"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/course"
        "404":
          description: "Course not found"
    delete:
      tags:
        - "course"
      summary: "Deletes a course"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of course to delete"
          required: true
          type: "integer"
      responses:
        "404":
          description: "Course not found"
  /courses/{course_id}/enroll:
    post:
      tags:
        - "course"
      summary: "Create course enrollment"
      description: ""
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "course_id"
          in: "path"
          description: "ID of course to enroll"
          required: true
          type: "integer"
          format: "int64"
        - name: "talent_id"
          in: "formData"
          description: "User id to enroll"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
    delete:
      tags:
        - "course"
      summary: "Delete course enrollment"
      description: ""
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "course_id"
          in: "path"
          description: "ID of course to unenroll"
          required: true
          type: "integer"
          format: "int64"
        - name: "talent_id"
          in: "formData"
          description: "User id to unenroll"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
  /courses/{course_id}/talents:
    get:
      tags:
        - "course"
      summary: "Get all talents of course"
      description: ""
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "course_id"
          in: "path"
          description: "ID of course to unenroll"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/users"
        "404":
          description: "Course not found"

  /api/v1/users:
    get:
      tags:
        - "user"
      summary: "Get all users"
      description: ""
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/users"
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "Create user in the application"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "user"
          description: "Create a new user"
          required: true
          schema:
            $ref: "#/definitions/createUserBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/userItem"
        "400":
          description: "Invalid user supplied"
          schema:
            $ref: "#/definitions/ErrorsList"
  /api/v1/users/{id}:
    get:
      tags:
        - "user"
      summary: "Get user by user id"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "User id of the user"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/userItem"
        "404":
          description: "User not found"
    patch:
      tags:
        - "user"
      summary: "Update user"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "User id of the user"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/createUserBody"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/userItem"
        "404":
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "User id of the user"
          required: true
          type: "integer"
      responses:
        "404":
          description: "User not found"

  /api/v1/users/{user_id}/enrollments:
    get:
      tags:
        - "user"
      summary: "Get users enrollments"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id of the user"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/userCourses"
        "404":
          description: "User not found"

  /api/v1/users/{user_id}/courses:
    get:
      tags:
        - "user"
      summary: "Get users courses as a author"
      produces:
        - "application/json"
      parameters:
        - name: "user_id"
          in: "path"
          description: "User id of the user"
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/userCourses"
        "404":
          description: "User not found"

definitions:
  createUserBody:
    type: "object"
    properties:
      user:
        type: "object"
        properties:
          first_name:
            type: "string"
          last_name:
            type: "string"
          email:
            type: "string"
          phone:
            type: "string"
        required:
          - first_name
          - last_name
          - email

  userItem:
    description: user
    properties:
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      phone:
        type: string

  users:
    type: array
    items:
      $ref: "#/definitions/userItem"

  userCourses:
    type: array
    items:
      $ref: "#/definitions/course"

  course:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
      description:
        type: string

  ErrorsList:
    type: object
    properties:
      first_name:
        type: string


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"